package com.azify.azifacemobilesdk;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.azify.theme.Theme;
import com.azify.utils.CommonParams;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.bridge.ReadableMap;
import org.json.JSONException;
import org.json.JSONObject;
import java.io.IOException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Request;
import okhttp3.Response;

import com.azify.processors.*;
import static java.util.UUID.randomUUID;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facetec.sdk.*;

@ReactModule(name = AzifaceMobileSdkModule.NAME)
public class AzifaceMobileSdkModule extends ReactContextBaseJavaModule {
  public static final String NAME = "AzifaceMobileSdk";
  public static Theme AziTheme;
  private final ReactApplicationContext reactContext;
  private boolean isInitialized = false;
  private boolean isSessionPreparingToLaunch = false;
  private String latestExternalDatabaseRefID = "";
  public Promise promise;
  public Processor latestProcessor;
  public FaceTecSessionResult latestSessionResult;
  public FaceTecIDScanResult latestIDScanResult;

  public AzifaceMobileSdkModule(ReactApplicationContext context) {
    super(context);

    reactContext = context;
    AziTheme = new Theme(context);
  }

  @Override
  @NonNull
  public String getName() {
    return NAME;
  }

  @ReactMethod
  public void initialize(ReadableMap params, ReadableMap headers, Promise promise) {
    setPromise(promise);

    CommonParams parameters = new CommonParams(params);

    if (parameters.isNull()) {
      isInitialized = false;
      if (this.hasPromise()) {
        this.promise.reject("Parameters aren't provided", "ParamsNotProvided");
      }
      return;
    }

    parameters.setHeaders(headers);
    parameters.build();

    if (Config.hasConfig()) {
      Config.initializeFaceTecSDKFromAutogeneratedConfig(
          reactContext,
          parameters.isDeveloper(),
          new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
              isInitialized = successful;
              if (hasPromise() && !isInitialized) {
                promise.reject("Initialization failed", "InitializationFailed");
              }
              if (isInitialized) {
                promise.resolve(true);
              }
            }
          });
    } else {
      isInitialized = false;
      if (this.hasPromise()) {
        promise.reject("Configuration aren't provided", "ConfigNotProvided");
      }
      return;
    }

    this.setTheme(Theme.Style);
  }

  interface SessionTokenCallback {
    void onSessionTokenReceived(String sessionToken);
  }

  public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {
    Request request = new Request.Builder()
        .headers(Config.getHeaders("GET"))
        .url(Config.BaseURL + "/Process/Session/Token")
        .get()
        .build();

    NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
      @Override
      public void onFailure(Call call, IOException e) {
        if (hasPromise()) {
          promise.reject("Exception raised while attempting HTTPS call.", "HTTPSError");
        }
      }

      @Override
      public void onResponse(Call call, Response response) throws IOException {
        String responseString = response.body().string();
        response.body().close();
        try {
          JSONObject responseJSON = new JSONObject(responseString);
          JSONObject responseJSONData = responseJSON.getJSONObject("data");

          if (responseJSONData.has("sessionToken")) {
            sessionTokenCallback.onSessionTokenReceived(responseJSONData.getString("sessionToken"));
          } else {
            if (hasPromise()) {
              promise.reject("Response JSON is missing sessionToken.", "JSONError");
            }
          }
        } catch (JSONException e) {
          if (hasPromise()) {
            promise.reject("Exception raised while attempting to parse JSON result.", "JSONError");
          }
        }
      }
    });
  }

  public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
    this.latestSessionResult = sessionResult;
  }

  public void setLatestIDScanResult(FaceTecIDScanResult idScanResult) {
    this.latestIDScanResult = idScanResult;
  }

  public void resetLatestResults() {
    this.latestSessionResult = null;
    this.latestIDScanResult = null;
  }

  public void setLatestExternalDatabaseRefID(String externalDatabaseRefID) {
    this.latestExternalDatabaseRefID = externalDatabaseRefID;
  }

  public String getLatestExternalDatabaseRefID() {
    return this.latestExternalDatabaseRefID;
  }

  public void setPromise(Promise promise) {
    this.promise = promise;
  }

  public Boolean hasPromise() {
    return this.promise != null;
  }

  public void sendEvent(@NonNull String eventName, @Nullable Boolean eventValue) {
    reactContext
        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
        .emit(eventName, eventValue);
  }

  @ReactMethod
  public void addListener(String eventName) {
  }

  @ReactMethod
  public void removeListeners(Integer count) {
  }

  @ReactMethod
  public void setTheme(ReadableMap theme) {
    Theme.setTheme(theme);
  }

  @ReactMethod
  public void handleEnrollUser(ReadableMap data, Promise promise) {
    setPromise(promise);

    if (!isInitialized) {
      this.promise.reject("FaceTecSDK doesn't initialized!", "NotInitialized");
      return;
    }

    isSessionPreparingToLaunch = true;

    getSessionToken(new SessionTokenCallback() {
      @Override
      public void onSessionTokenReceived(String sessionToken) {
        resetLatestResults();
        isSessionPreparingToLaunch = false;
        setLatestExternalDatabaseRefID("android_azify_app_" + randomUUID());

        if(data != null) {
          CommonParams parameters = new CommonParams(data);
          parameters.buildProcessorPathURL();
        }

        latestProcessor = new EnrollmentProcessor(sessionToken, reactContext.getCurrentActivity(),
            AzifaceMobileSdkModule.this, data);
      }
    });
  }

  @ReactMethod
  public void handleAuthenticateUser(ReadableMap data, Promise promise) {
    setPromise(promise);

    if (!isInitialized) {
      this.promise.reject("FaceTecSDK doesn't initialized!", "NotInitialized");
      return;
    }

    isSessionPreparingToLaunch = true;

    getSessionToken(new SessionTokenCallback() {
      @Override
      public void onSessionTokenReceived(String sessionToken) {
        resetLatestResults();
        isSessionPreparingToLaunch = false;


        if(data != null) {
          CommonParams parameters = new CommonParams(data);
          parameters.buildProcessorPathURL();
        }

        latestProcessor = new AuthenticateProcessor(sessionToken, reactContext.getCurrentActivity(),
            AzifaceMobileSdkModule.this, data);
      }
    });
  }

  @ReactMethod
  public void handlePhotoIDMatch(ReadableMap data, Promise promise) {
    setPromise(promise);

    if (!isInitialized) {
      this.promise.reject("FaceTecSDK doesn't initialized!", "NotInitialized");
      return;
    }

    isSessionPreparingToLaunch = true;

    getSessionToken(new SessionTokenCallback() {
      @Override
      public void onSessionTokenReceived(String sessionToken) {
        resetLatestResults();
        isSessionPreparingToLaunch = false;
        setLatestExternalDatabaseRefID("android_azify_app_" + randomUUID());


        if(data != null) {
          CommonParams parameters = new CommonParams(data);
          parameters.buildProcessorPathURL();
        }

        latestProcessor = new PhotoIDMatchProcessor(sessionToken, reactContext.getCurrentActivity(),
            AzifaceMobileSdkModule.this, data);
      }
    });
  }
}
