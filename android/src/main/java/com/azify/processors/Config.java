package com.azify.processors;

import android.content.Context;

import com.azify.azifacemobilesdk.AzifaceMobileSdkModule;
import com.azify.theme.Theme;
import com.facebook.react.bridge.ReadableMap;
import com.facetec.sdk.*;
import com.azify.azifacemobilesdk.R;

import java.util.HashMap;
import java.util.Map;

import okhttp3.Headers;
import okhttp3.Request;

public class Config {
  public static String DeviceKeyIdentifier;
  public static String BaseURL;
  public static String ProcessId;
  public static String PublicFaceScanEncryptionKey;
  public static String ProductionKeyText;
  public static ReadableMap Theme;
  public static ReadableMap RequestHeaders;
  public static Map<String, String> ProcessorPathURL = new HashMap<String, String>();

  private static Map<String, String> parseReadableMapToMap() {
    Map<String, String> headers = new HashMap<>();

    if (RequestHeaders == null) {
      return headers;
    }

    for (Map.Entry<String, Object> entry : RequestHeaders.toHashMap().entrySet()) {
      String key = entry.getKey();
      Object value = entry.getValue();
      headers.put(key, value == null ? "" : value.toString());
    }
    return headers;
  }

  private static Headers parseHeadersMapToHeaders(Map<String, String> headersMap, String httpMethod) {
    okhttp3.Request.Builder buildHeader = new Request.Builder()
        .header("X-Device-Key", DeviceKeyIdentifier)
        .header("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""));

    if (!httpMethod.equalsIgnoreCase("GET")) {
      buildHeader = buildHeader.header("Content-Type", "application/json");
    }

    for (Map.Entry<String, String> entry : headersMap.entrySet()) {
      buildHeader = buildHeader.header(entry.getKey(), entry.getValue());
    }

    okhttp3.Request requestHeader = buildHeader
        .url(Config.BaseURL)
        .build();

    return requestHeader.headers();
  }

  public static Headers getHeaders(String httpMethod) {
    Map<String, String> headersMap = parseReadableMapToMap();
    return parseHeadersMapToHeaders(headersMap, httpMethod.toUpperCase());
  }

  public static void setDevice(String device) {
    DeviceKeyIdentifier = device;
  }

  public static void setUrl(String url) {
    BaseURL = url;
  }

  public static void setProcessId(String id) {
    ProcessId = id;
  }

  public static void setKey(String key) {
    PublicFaceScanEncryptionKey = key;
  }

  public static void setProductionKeyText(String keyText) {
    ProductionKeyText = keyText;
  }

  public static void setProcessorPathURL(String key, String pathUrl) {
    ProcessorPathURL.put(key, pathUrl);
  }

  public static void setHeaders(ReadableMap headers) {
    RequestHeaders = headers;
  }

  public static boolean hasConfig() {
    return DeviceKeyIdentifier != null
        && BaseURL != null
        && PublicFaceScanEncryptionKey != null
        && ProductionKeyText != null;
  }

  public static void initializeFaceTecSDKFromAutogeneratedConfig(
      Context context,
      boolean isDeveloper,
      FaceTecSDK.InitializeCallback callback) {
    if (isDeveloper) {
      FaceTecSDK.initializeInDevelopmentMode(context, DeviceKeyIdentifier, PublicFaceScanEncryptionKey, callback);
    } else {
      FaceTecSDK.initializeInProductionMode(context, ProductionKeyText, DeviceKeyIdentifier,
          PublicFaceScanEncryptionKey, callback);
    }
  }

  public static FaceTecCustomization retrieveConfigurationWizardCustomization() {
    Theme theme = AzifaceMobileSdkModule.AziTheme;

    FaceTecCancelButtonCustomization.ButtonLocation cancelButtonLocation = theme.getGeneral()
        .getButtonLocation("cancelButtonLocation");

    FaceTecCustomization defaultCustomization = new FaceTecCustomization();

    defaultCustomization.getFrameCustomization().cornerRadius = theme.getFrame().getCornerRadius();
    defaultCustomization.getFrameCustomization().backgroundColor = theme.getFrame().getBackgroundColor();
    defaultCustomization.getFrameCustomization().borderColor = theme.getFrame().getBorderColor();

    defaultCustomization.getOverlayCustomization().brandingImage = theme
        .getImage("logo", R.drawable.facetec_your_app_logo);
    defaultCustomization.getOverlayCustomization().backgroundColor = theme
        .getColor("overlayBackgroundColor");

    defaultCustomization.getGuidanceCustomization().backgroundColors = theme.getGuidance().getBackgroundColor();
    defaultCustomization.getGuidanceCustomization().foregroundColor = theme.getGuidance().getForegroundColor();
    defaultCustomization.getGuidanceCustomization().buttonBackgroundNormalColor = theme.getGuidance()
        .getButton().getBackgroundNormalColor();
    defaultCustomization.getGuidanceCustomization().buttonBackgroundDisabledColor = theme.getGuidance()
        .getButton().getBackgroundDisabledColor();
    defaultCustomization.getGuidanceCustomization().buttonBackgroundHighlightColor = theme.getGuidance()
        .getButton().getBackgroundHighlightColor();
    defaultCustomization.getGuidanceCustomization().buttonTextNormalColor = theme.getGuidance().getButton()
        .getTextNormalColor();
    defaultCustomization.getGuidanceCustomization().buttonTextDisabledColor = theme.getGuidance().getButton()
        .getTextDisabledColor();
    defaultCustomization.getGuidanceCustomization().buttonTextHighlightColor = theme.getGuidance().getButton()
        .getTextHighlightColor();
    defaultCustomization.getGuidanceCustomization().retryScreenImageBorderColor = theme.getGuidance().getRetryScreen()
        .getImageBorderColor();
    defaultCustomization.getGuidanceCustomization().retryScreenOvalStrokeColor = theme.getGuidance().getRetryScreen()
        .getOvalStrokeColor();

    defaultCustomization.getOvalCustomization().strokeColor = theme.getOval().getStrokeColor();
    defaultCustomization.getOvalCustomization().progressColor1 = theme.getOval().getFirstProgressColor();
    defaultCustomization.getOvalCustomization().progressColor2 = theme.getOval().getSecondProgressColor();

    defaultCustomization.getFeedbackCustomization().backgroundColors = theme.getFeedback().getBackgroundColor();
    defaultCustomization.getFeedbackCustomization().textColor = theme.getFeedback().getTextColor();

    defaultCustomization.getCancelButtonCustomization().customImage = theme.getImage("cancel",
        R.drawable.facetec_cancel);
    defaultCustomization.getCancelButtonCustomization().setLocation(cancelButtonLocation);

    defaultCustomization.getResultScreenCustomization().backgroundColors = theme.getResultScreen().getBackgroundColor();
    defaultCustomization.getResultScreenCustomization().foregroundColor = theme.getResultScreen().getForegroundColor();
    defaultCustomization.getResultScreenCustomization().activityIndicatorColor = theme.getResultScreen()
        .getActivityIndicatorColor();
    defaultCustomization.getResultScreenCustomization().resultAnimationBackgroundColor = theme.getResultScreen()
        .getResultAnimation().getBackgroundColor();
    defaultCustomization.getResultScreenCustomization().resultAnimationForegroundColor = theme.getResultScreen()
        .getResultAnimation().getForegroundColor();
    defaultCustomization.getResultScreenCustomization().uploadProgressFillColor = theme.getResultScreen()
        .getUploadProgressFillColor();

    defaultCustomization.securityWatermarkImage = FaceTecSecurityWatermarkImage.FACETEC;

    defaultCustomization.getIdScanCustomization().selectionScreenBackgroundColors = theme.getIdScan()
        .getSelectionScreen().getBackgroundColor();
    defaultCustomization.getIdScanCustomization().selectionScreenForegroundColor = theme.getIdScan()
        .getSelectionScreen().getForegroundColor();

    defaultCustomization.getIdScanCustomization().reviewScreenForegroundColor = theme.getIdScan().getReviewScreen()
        .getForegroundColor();
    defaultCustomization.getIdScanCustomization().reviewScreenTextBackgroundColor = theme.getIdScan().getReviewScreen()
        .getTextBackgroundColor();

    defaultCustomization.getIdScanCustomization().captureScreenForegroundColor = theme.getIdScan().getCaptureScreen()
        .getForegroundColor();
    defaultCustomization.getIdScanCustomization().captureScreenTextBackgroundColor = theme.getIdScan()
        .getCaptureScreen().getTextBackgroundColor();
    defaultCustomization.getIdScanCustomization().captureScreenBackgroundColor = theme.getIdScan().getCaptureScreen()
        .getBackgroundColor();
    defaultCustomization.getIdScanCustomization().captureFrameStrokeColor = theme.getIdScan().getCaptureScreen()
        .getFrameStrokeColor();

    defaultCustomization.getIdScanCustomization().buttonBackgroundNormalColor = theme.getIdScan().getButton()
        .getBackgroundNormalColor();
    defaultCustomization.getIdScanCustomization().buttonBackgroundDisabledColor = theme.getIdScan().getButton()
        .getBackgroundDisabledColor();
    defaultCustomization.getIdScanCustomization().buttonBackgroundHighlightColor = theme.getIdScan().getButton()
        .getBackgroundHighlightColor();
    defaultCustomization.getIdScanCustomization().buttonTextNormalColor = theme.getIdScan().getButton()
        .getTextNormalColor();
    defaultCustomization.getIdScanCustomization().buttonTextDisabledColor = theme.getIdScan().getButton()
        .getTextDisabledColor();
    defaultCustomization.getIdScanCustomization().buttonTextHighlightColor = theme.getIdScan().getButton()
        .getTextHighlightColor();

    return defaultCustomization;
  }

  public static FaceTecCustomization retrieveLowLightConfigurationWizardCustomization() {
    return retrieveConfigurationWizardCustomization();
  }

  public static FaceTecCustomization retrieveDynamicDimmingConfigurationWizardCustomization() {
    return retrieveConfigurationWizardCustomization();
  }

  public static FaceTecCustomization currentCustomization = retrieveConfigurationWizardCustomization();
  public static FaceTecCustomization currentLowLightCustomization = retrieveLowLightConfigurationWizardCustomization();
  public static FaceTecCustomization currentDynamicDimmingCustomization = retrieveDynamicDimmingConfigurationWizardCustomization();
}
