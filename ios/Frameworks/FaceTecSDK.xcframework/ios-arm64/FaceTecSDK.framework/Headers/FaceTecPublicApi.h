#import <UIKit/UIKit.h>
#import "FaceTecPublicStringKeys.h"
#import "FaceTecShadow.h"

/** Represents the options for placement of the Cancel Button. */
typedef NS_ENUM(NSInteger, FaceTecCancelButtonLocation) {
    /** Cancel Button will appear in the top left. */
    FaceTecCancelButtonLocationTopLeft = 0,
    /** Cancel Button will appear in the top right. */
    FaceTecCancelButtonLocationTopRight = 1,
    /** Cancel Button will be disabled and hidden. */
    FaceTecCancelButtonLocationDisabled = 2,
    /** Cancel Button will be appear at the location and size specified by cancelButtonCustomization.customLocation. */
    FaceTecCancelButtonLocationCustom = 3,
};

/** Represents the options for the transition animation used when dismissing the Interface. */
typedef NS_ENUM(NSInteger, FaceTecExitAnimationStyle) {
    /** Default. Quick fade out. */
    FaceTecExitAnimationStyleNone = 0,
    /** Frame will fade out as oval and frame expand out quickly. */
    FaceTecExitAnimationStyleRippleOut = 1,
    /** Frame will slowly fade out as oval and frame slowly expand out.*/
    FaceTecExitAnimationStyleRippleOutSlow = 2,
};

/** For customizing the FaceTec Security Watermark Image. */
typedef NS_ENUM(NSInteger, FaceTecSecurityWatermarkImage) {
    FaceTecSecurityWatermarkImageFaceTecZoom = 0,
    FaceTecSecurityWatermarkImageFaceTec = 1,
    FaceTecSecurityWatermarkImageFaceTecPoweredBy = 2
};

/** For setting FaceTec Vocal Guidance mode. */
typedef NS_ENUM(NSInteger, FaceTecVocalGuidanceMode) {
    FaceTecVocalGuidanceModeNoVocalGuidance = 0,
    FaceTecVocalGuidanceModeMinimalVocalGuidance = 1,
    FaceTecVocalGuidanceModeFullVocalGuidance = 2,
};

/** Errors that can occur during intialization.  */
typedef NS_ENUM(NSInteger, FaceTecInitializationError) {
    /** The FaceTec Server could not validate this application. */
    FaceTecInitializationErrorRejectedByServer,
    /** The provided FaceTecSessionRequestProcessor called abortOnCatastrophicError() and the application could not be validated. */
    FaceTecInitializationErrorRequestAborted,
};


@protocol FaceTecSDKProtocol;
@class FaceTecSDKInstance;
@class FaceTecSessionResult;

__attribute__((visibility("default")))
@interface FaceTec: NSObject
@property (nonatomic, class, readonly, strong) id <FaceTecSDKProtocol> _Nonnull sdk;
@end

/** A callback that will be provided to return a Response Blob */
@protocol FaceTecSessionRequestProcessorCallback <NSObject>
/** Called to return a Response Blob provided by the FaceTec Server*/
- (void)processResponse:(NSString *_Nonnull)responseBlob;
/** Called to provide an update on the progress of uploading the Request Blob. */
- (void)updateProgress:(float)uploadPercent;
/** Called to indicate that a Response Blob could not be retrieved for the provided Request Blob. */
- (void)abortOnCatastrophicError;
@end

/** The interface that must be implemented to process the Request Blobs that are provided by the FaceTec SDK */
@protocol FaceTecSessionRequestProcessor <NSObject>
/** Called when a new Request Blob has been generated by the FaceTec SDK that needs to be processed by the Server */
- (void)onSessionRequest:(NSString*_Nonnull)sessionRequestBlob sessionRequestCallback:(id<FaceTecSessionRequestProcessorCallback> _Nonnull)sessionRequestCallback NS_SWIFT_NAME(onSessionRequest(sessionRequestBlob:sessionRequestCallback:));
/** Called when a session has been completed and control is being returned to the application. */
- (void)onFaceTecExit:(FaceTecSessionResult*_Nonnull)sessionResult NS_SWIFT_NAME(onFaceTecExit(sessionResult:));
@end

/** The callback that is invoked when the SDK has finished initializing. */
@protocol FaceTecInitializeCallback <NSObject>
/** Invoked when the SDK has been initialized successfully*/
- (void)onFaceTecSDKInitializeSuccess:(FaceTecSDKInstance*_Nonnull)sdkInstance NS_SWIFT_NAME(onFaceTecSDKInitializeSuccess(sdkInstance:));
/** Invoked when the SDK cannot be initialized. */
- (void)onFaceTecSDKInitializeError:(FaceTecInitializationError)error NS_SWIFT_NAME(onFaceTecSDKInitializeError(error:));
@end

@class NSDate;

/** Represents the possible state of camera permissions. */
typedef NS_ENUM(NSInteger, FaceTecCameraPermissionStatus) {
    /** The user has not yet been asked for permission to use the camera */
     FaceTecCameraPermissionStatusNotDetermined = 0,
    /** The user denied the app permission to use the camera or manually revoked the app’s camera permission.
     From this state, permission can only be modified by the user from System ‘Settings’ context. */
    FaceTecCameraPermissionStatusDenied = 1,
    /** The camera permission on this device has been disabled due to policy.
     From this state, permission can only be modified by the user from System ‘Settings’ context or contacting the system administrator. */
    FaceTecCameraPermissionStatusRestricted = 2,
    /** The user granted permission to use the camera. */
    FaceTecCameraPermissionStatusAuthorized = 3,
};

@class UIColor;
@class CAGradientLayer;
@class FaceTecGuidanceCustomization;
@class FaceTecOvalCustomization;
@class FaceTecFeedbackCustomization;
@class FaceTecCancelButtonCustomization;
@class FaceTecFrameCustomization;
@class FaceTecResultScreenCustomization;
@class FaceTecOverlayCustomization;
@class FaceTecIDScanCustomization;
@class FaceTecOCRConfirmationCustomization;
@class FaceTecVocalGuidanceCustomization;
@class FaceTecInitialLoadingAnimationCustomization;
@class FaceTecOrientationScreenCustomization;

/**
 Applications should implement this delegate to configure custom UIViews to display for specific interface animations.
 */
@protocol FaceTecCustomAnimationDelegate <NSObject>
/**
 Configure a custom UIView to display on the OCR Confirmation Screen's scroll indicator.
 This method will be called every time that the OCR Confirmation Screen is displayed.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: The scroll indicator animation is displayed indefinitely until user action, so the custom animation should be set to loop/repeat infinitely.
 If this returns nil, the default animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateOCRConfirmationScrollIndicatorAnimationView NS_SWIFT_NAME(onCreateOCRConfirmationScrollIndicatorAnimationView());
/**
 Configure a custom UIView to display on the Securing Camera Screen for the animation during camera loading.
 This method will be called every time that the Securing Camera Screen is displayed.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: The activity indicator animation is displayed indefinitely during the server-side work, so the custom animation should be set to loop/repeat infinitely.
 If this returns nil, the default animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateInitialLoadingAnimationView NS_SWIFT_NAME(onCreateInitialLoadingAnimationView());
/**
 Configure a custom UIView to display on the Result Screen for the activity indicator animation during server-side work.
 This method will be called every time that the Result Screen is displayed after completing the and/or ID Scan process.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: The activity indicator animation is displayed indefinitely during the server-side work, so the custom animation should be set to loop/repeat infinitely.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default activity indicator animation or any rotating-image animation configured with FaceTecCustomization.FaceTecResultScreenCustomization.customActvityIndicatorImage.
 If this returns nil, FaceTecCustomization.FaceTecResultScreenCustomization.customActivityIndicatorImage will be used. If FaceTecCustomization.FaceTecResultScreenCustomization.customActivityIndicatorImage is nil, the default activity indicator animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateNewResultScreenActivityIndicatorView NS_SWIFT_NAME(onCreateNewResultScreenActivityIndicatorView());
/**
 Configure a custom UIView to display on the Result Screen for ID Scan success scenarios.
 This method will be called every time FaceTecSessionRequestProcessorCallback.processResponse() is called while the Result Screen is displayed after successfully competing a phase of the ID Scan process.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2.5 seconds, but can be configured within a range using the FaceTecResultScreenCustomization.resultAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this returns a UIView instance, the UIView supplied will be used instead of the default success animation or any success image configured with FaceTecResultScreenCustomization.resultAnimationSuccessBackgroundImage.
 If this returns nil, the default success animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateNewResultScreenIDScanSuccessAnimationView NS_SWIFT_NAME(onCreateNewResultScreenIDScanSuccessAnimationView());
/**
 Configure a custom UIView to display on the Result Screen for NFC success scenarios.
 This method will be called every time FaceTecSessionRequestProcessorCallback.processResponse()  is called while the Result Screen is displayed after successfully completing the NFC Scan phase of the ID Scan process.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2.5 seconds, but can be configured within a range using the FaceTecResultScreenCustomization.resultAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this returns a UIView instance, the UIView supplied will be used instead of the default success animation or any success image configured with FaceTecResultScreenCustomization.resultAnimationSuccessBackgroundImage.
 If this returns nil, the default success animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateNewResultScreenNFCSuccessAnimationView NS_SWIFT_NAME(onCreateNewResultScreenNFCSuccessAnimationView());
/**
 Configure a custom UIView to display on the Result Screen for FaceScan success scenarios.
 This method will be called every time FaceTecSessionRequestProcessorCallback.processResponse() is called while the Result Screen is displayed after completing the FaceScan process.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2.5 seconds, but can be configured within a range using the FaceTecResultScreenCustomization.resultAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this returns a UIView instance, the UIView supplied will be used instead of the default success animation or any success image configured with FaceTecResultScreenCustomization.resultAnimationSuccessBackgroundImage.
 If this returns nil, the default success animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateNewResultScreenSuccessAnimationView NS_SWIFT_NAME(onCreateNewResultScreenSuccessAnimationView());
/**
 Configure a custom UIView to display on the Result Screen for unsuccess scenarios. Unsuccess result animations are only shown for unsuccessful Photo ID Match attempts.
 This method will be called every time  FaceTecSessionRequestProcessorCallback.processResponse() is called while Result Screen is displayed after completing the session.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2.5 seconds, but can be configured within a range using the FaceTecResultScreenCustomization.resultAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this returns a UIView instance, the UIView supplied will be used instead of the default unsuccess animation or any unsuccess image configured with FaceTecResultScreenCustomization.resultAnimationUnsuccessBackgroundImage.
 If this returns nil, the default unsuccess animation will be used.
 */
@optional
- (UIView * _Nullable)onCreateNewResultScreenUnsuccessAnimationView NS_SWIFT_NAME(onCreateNewResultScreenUnsuccessAnimationView());
/**
 Configure a custom UIView to display on the NFC Scan Screen for the status animation before the user starts to scan their NFC chip.
 This method will be called every time that NFC scanning is ready-to-start on the NFC Scan Screen.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: The NFC Starting animation is displayed indefinitely during the device-side work to scan the NFC chip, so the custom animation should be set to loop/repeat infinitely. If the animation ends before the NFC Starting animation is dismissed, the animation will be restarted.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateNFCStartingAnimationView NS_SWIFT_NAME(onCreateNFCStartingAnimationView());
/**
 Configure a custom UIView to display on the NFC Scan Screen for the status animation while the user scan's their NFC chip.
 This method will be called every time that NFC scanning is in-progress on the NFC Scan Screen.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: The NFC Scanning animation is displayed indefinitely during the device-side work to scan the NFC chip, so the custom animation should be set to loop/repeat infinitely. If the animation ends before the NFC Scanning animation is dismissed, the animation will be restarted.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateNFCScanningAnimationView NS_SWIFT_NAME(onCreateNFCScanningAnimationView());

/**
 Configure a custom UIView to display on the NFC Scan Screen for the status animation before the user starts to scan their NFC card chip.
 This is similar to onCreateNFCStartingAnimationView, which is used for Passport books instead of Passport/NFC cards
 */
@optional
- (UIView * _Nullable)onCreateNFCCardStartingAnimationView NS_SWIFT_NAME(onCreateNFCCardStartingAnimationView());

/**
 Configure a custom UIView to display on the NFC Scan Screen for the status animation while the user scan's their NFC card chip
 This is similar to onCreateNFCScanningAnimationView, which is used for Passport books instead of Passport/NFC cards
 */
@optional
- (UIView * _Nullable)onCreateNFCCardScanningAnimationView NS_SWIFT_NAME(onCreateNFCCardScanningAnimationView());

/**
 Configure a custom UIView to display on the NFC Scan Screen for the status animation after NFC Scan is skipped due to an error or user interaction.
 This method will be called if the NFC Scan is skipped due to an error or user interaction.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2 seconds, but can be configured within a range using the FaceTecIDScanCustomization.nfcScreenAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateNFCSkipOrErrorAnimationView NS_SWIFT_NAME(onCreateNFCSkipOrErrorAnimationView());
/**
 Configure a custom UIView to display on the ID Scan Additional Review Screen.
 This method will be called when we show the ID Scan Additional Review Screen.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2 seconds, but can be configured within a range using the FaceTecIDScanCustomization.additionalReviewScreenAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateAdditionalReviewScreenAnimationView NS_SWIFT_NAME(onCreateAdditionalReviewScreenAnimationView());
/**
 Configure a custom UIView to display on the ID Scan Feedback Screen.
 This method will be called when we show the ID Scan Feedback Screen when presenting an ID front-side for an ID back-side capture, or when progressing from the front-side capture to the back-side capture.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2 seconds, but can be configured within a range using the FaceTecIDScanCustomization.idFeedbackScreenAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateIDFeedbackScreenFlipIDToBackAnimationView NS_SWIFT_NAME(onCreateIDFeedbackScreenFlipIDToBackAnimationView());
/**
 Configure a custom UIView to display on the ID Scan Feedback Screen.
 This method will be called when we show the ID Scan Feedback Screen when presenting an ID back-side for an ID front-side capture.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 Note: By default, the result animation is displayed for 2 seconds, but can be configured within a range using the FaceTecIDScanCustomization.idFeedbackScreenAnimationDisplayTime API.  Custom animation timing should be configured accordingly.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateIDFeedbackScreenFlipIDToFrontAnimationView NS_SWIFT_NAME(onCreateIDFeedbackScreenFlipIDToFrontAnimationView());

/**
 Configure a custom UIView to display on the Session Abort Screen.
 This method will be called when we show the Session Abort Screen.
 Sizing of the UIView's contents should be calculated relative to the UIView's bounds. Animations should be setup to start in the UIView's didMoveToSuperview method.
 If this retuns a UIView instance, the UIView supplied will be used instead of the default internal UIView.
 If this returns nil, the default internal UIView will be used.
 */
@optional
- (UIView * _Nullable)onCreateCustomSessionAbortAnimation NS_SWIFT_NAME(onCreateCustomSessionAbortAnimation());

@end

/**
 * Class used to customize the look and feel of the Interface.
 * FaceTec SDK ships with a default  theme but has a variety of variables that you can use to configure to your application's needs.
 * To customize the Interface, simply create an instance of FaceTecCustomization and set some, or all, of the variables.
 */
__attribute__((visibility("default")))
@interface FaceTecCustomization : NSObject

/** Customize the User OCR Confirmation Screen. */
@property (nonatomic, strong) FaceTecOCRConfirmationCustomization * _Nonnull ocrConfirmationCustomization;
/** Customize the Photo ID Match Screens. */
@property (nonatomic, strong) FaceTecIDScanCustomization * _Nonnull idScanCustomization;
/** Customize the Overlay, separating the Interface from the presenting application context. */
@property (nonatomic, strong) FaceTecOverlayCustomization * _Nonnull overlayCustomization;
/** Customize the New User Guidance and Retry Screens. */
@property (nonatomic, strong) FaceTecGuidanceCustomization * _Nonnull guidanceCustomization;
/** Customize the Result Screen. */
@property (nonatomic, strong) FaceTecResultScreenCustomization * _Nonnull resultScreenCustomization;
/** Customize the Oval and the Progress Spinner animations. */
@property (nonatomic, strong) FaceTecOvalCustomization * _Nonnull ovalCustomization;
/** Customize the Feedback Bar. */
@property (nonatomic, strong) FaceTecFeedbackCustomization * _Nonnull feedbackCustomization;
/** Customize the Cancel Button. */
@property (nonatomic, strong) FaceTecCancelButtonCustomization * _Nonnull cancelButtonCustomization;
/** Customize the Frame. */
@property (nonatomic, strong) FaceTecFrameCustomization * _Nonnull frameCustomization;
/** Customize the interface animations. */
@property (nonatomic, strong) id<FaceTecCustomAnimationDelegate> _Nullable customAnimationDelegate;
/** Customize the FaceTec Security Watermark Image by selecting from 1 of the 3 available FaceTec watermarks. */
@property (nonatomic) enum FaceTecSecurityWatermarkImage securityWatermarkImage;
/** Customize FaceTec Vocal Guidance feature like settings run mode or providing sound files.*/
@property (nonatomic, strong) FaceTecVocalGuidanceCustomization * _Nonnull vocalGuidanceCustomization;
/** Customize the Securing Camera Screen. */
@property (nonatomic, strong) FaceTecInitialLoadingAnimationCustomization * _Nonnull initialLoadingAnimationCustomization;
/** Customize the Orientation Screen. */
@property (nonatomic, strong) FaceTecOrientationScreenCustomization * _Nonnull orientationScreenCustomization;

/**
 * Customize the transition out animation for an unsuccessful Session.
 * Default is FaceTecExitAnimationStyleNone.
 */
@property (nonatomic) enum FaceTecExitAnimationStyle exitAnimationUnsuccess;
/**
 * Customize the transition out animation for a successful Session.
 * Default is FaceTecExitAnimationStyleNone.
 */
@property (nonatomic) enum FaceTecExitAnimationStyle exitAnimationSuccess;

@property (nonatomic) NSDictionary* _Nullable featureFlagsMap;

- (void) setGuidanceCustomization:(FaceTecGuidanceCustomization * _Nullable)guidanceCustomization;
- (void) setOvalCustomization:(FaceTecOvalCustomization * _Nullable)ovalCustomization;
- (void) setFeedbackCustomization:(FaceTecFeedbackCustomization * _Nullable)feedbackCustomization;
- (void) setFrameCustomization:(FaceTecFrameCustomization * _Nullable)zoomFrameCustomization;
- (void) setCancelButtonCustomization:(FaceTecCancelButtonCustomization * _Nullable)cancelButtonCustomization;
- (void) setVocalGuidanceCustomization:(FaceTecVocalGuidanceCustomization * _Nullable)vocalGuidanceCustomization;
- (void) setResultScreenCustomization:(FaceTecResultScreenCustomization * _Nullable)resultScreenCustomization;
- (void) setOverlayCustomization:(FaceTecOverlayCustomization * _Nullable)overlayCustomization;
- (void) setIdScanCustomization:(FaceTecIDScanCustomization * _Nullable)iDScanCustomization;
- (void) setOCRConfirmationCustomization:(FaceTecOCRConfirmationCustomization * _Nullable)ocrConfirmationCustomization;
- (void) setInitialLoadingAnimationCustomization:(FaceTecInitialLoadingAnimationCustomization * _Nullable)initialLoadingAnimationCustomization;

- (nonnull instancetype)init;
- (nonnull instancetype)initWithFeatureFlagsMap:(NSDictionary* _Nullable)featureFlagsMap  NS_SWIFT_NAME(init(featureFlagsMap:));
+ (nonnull instancetype)new;
@end

/**
 * Customize the User OCR Confirmation Screen.
 */
__attribute__((visibility("default")))
@interface FaceTecOCRConfirmationCustomization : NSObject
/**
 * Color of the User OCR Confirmation Screen background.
 * Default is white.
 */
@property (nonatomic, strong) NSArray<UIColor *> * _Nonnull backgroundColors;
/**
 * Color of the line below the main header on the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull mainHeaderDividerLineColor;
/**
 * Thickness of the line below the main header on the User OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int mainHeaderDividerLineWidth;
/**
 * Font of the the main header text on the User OCR Confirmation Screen.
 * Default is bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull mainHeaderFont;
/**
 * Color of the main header text on the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull mainHeaderTextColor;
/**
 * Font of the section headers' text on the User OCR Confirmation Screen.
 * Default is bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull sectionHeaderFont;
/**
 * Color of the section headers' text on the User OCR Confirmation Screen.
 * Default is off-black.
 */
@property (nonatomic, strong) UIColor * _Nonnull sectionHeaderTextColor;
/**
 * Font of the field labels' text on the User OCR Confirmation Screen.
 * Default is light system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull fieldLabelFont;
/**
 * Color of the field labels' text on the User OCR Confirmation Screen.
 * Default is off-black.
 */
@property (nonatomic, strong) UIColor * _Nonnull fieldLabelTextColor;
/**
 * Font of the field values' text on the User OCR Confirmation Screen.
 * Default is light system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull fieldValueFont;
/**
 * Color of the field values' text on the User OCR Confirmation Screen.
 * Default is off-black.
 */
@property (nonatomic, strong) UIColor * _Nonnull fieldValueTextColor;
/**
 * Color of the input fields' backgrounds on the User OCR Confirmation Screen.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull inputFieldBackgroundColor;
/**
 * Font of the input fields' text on the User OCR Confirmation Screen.
 * If this value is nil, the font of the input fields' text will use the value configured for .fieldValueFont.
 * Default is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable inputFieldFont;
/**
 * Color of the input fields' text on the User OCR Confirmation Screen.
 * If this value is nil, the color of the input fields' text will use the value configured for .fieldValueTextColor.
 * Default is nil.
 */
@property (nonatomic, strong) UIColor * _Nullable inputFieldTextColor;
/**
 * Color of the input fields' borders on the User OCR Confirmation Screen.
 * Default is off-black.
 */
@property (nonatomic, strong) UIColor * _Nonnull inputFieldBorderColor;
/**
 * Thickness of the input fields' borders on the User OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int inputFieldBorderWidth;
/**
 * Corner radius of the input fields' borders on the User OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int inputFieldCornerRadius;
/**
 * Font of the input fields' placeholder text on the User OCR Confirmation Screen.
 * If this value is nil, the font of the input fields' placeholder text will use the value configured for .inputFieldFont unless that value is nil, in which case the font of the input fields' placeholder text will use the value configured for .fieldValueFont.
 * Default is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable inputFieldPlaceholderFont;
/**
 * Color of the input fields' placeholder text on the User OCR Confirmation Screen.
 * If this value is nil, the color of the input fields' placeholder text will use the value configured for .inputFieldTextColor with a 0.4 alpha component unless that value is nil, in which case the color of the input fields' placeholder text will use the value configured for .fieldValueTextColor with a 0.4 alpha component.
 * Default is nil.
 */
@property (nonatomic, strong) UIColor * _Nonnull inputFieldPlaceholderTextColor;
/**
 * Control whether the input fields' borders are only displayed along the bottom bounds, or if they are displayed as a full box around the input fields on the User OCR Confirmation Screen.
 * Default is false (showing full border box around input fields).
 */
@property (nonatomic) BOOL showInputFieldBottomBorderOnly;
/**
 * Font of the action button's text during the User OCR Confirmation Screen.
 * Default is a bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull buttonFont;
/**
 * Color of the action button's text during the User OCR Confirmation Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextNormalColor;
/**
 * Color of the action button's background during the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundNormalColor;
/**
 * Color of the action button's text when the button is pressed during the User OCR Confirmation Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextHighlightColor;
/**
 * Color of the action button's background when the button is pressed during the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundHighlightColor;
/**
 * Color of the action button's text when the button is disabled during the User OCR Confirmation Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextDisabledColor;
/**
 * Color of the action button's background when the button is disabled during the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundDisabledColor;
/**
 * Color of the action button's border during the User OCR Confirmation Screen.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBorderColor;
/**
 * Thickness of the action button's border during the User OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonBorderWidth;
/**
 * Corner radius of the action button's border during the User OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonCornerRadius;
/**
 * Color of the scroll indicator's background during the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull scrollIndicatorBackgroundNormalColor;
/**
 * Color of the scroll indicator's background when the button is pressed during the User OCR Confirmation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull scrollIndicatorBackgroundHighlightColor;
/**
 * Color of the scroll indicator's text and default image tint during the User OCR Confirmation Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull scrollIndicatorForegroundNormalColor;
/**
 * Color of the scroll indicator's text and default image tint when the button is pressed during the User OCR Confirmation Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull scrollIndicatorForegroundHighlightColor;
/**
 * Color of the scroll indicator's border during the User OCR Confirmation Screen.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull scrollIndicatorBorderColor;
/**
 * Thickness of the scroll indicator's border during theUser OCR Confirmation Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int scrollIndicatorBorderWidth;
/**
 * Corner radius of the scroll indicator's border on the User OCR Confirmation Screen.
 * If this value is set to -1, the corner radius will be set to half the height of the scroll indicator.
 * Default is -1.
 */
@property (nonatomic) int scrollIndicatorCornerRadius;
/**
 * Font of the scroll indicator's text on the User OCR Confirmation Screen.
 * If this value is null, FaceTec's default Typeface will be used.
 * Default is null.
 */
@property (nonatomic, strong) UIFont * _Nullable scrollIndicatorFont;
/**
 * Shadow displayed behind the scroll indicator on the User OCR Confirmation Screen.
 * This customization can be set to nil for no shadow, or it can be set to an instance of FaceTecShadow.
 * Note: FaceTecShadow's configurable properties correlate to the shadow-related attributes available for CALayer objects.
 * Default is a custom shadow.
 */
@property (nonatomic) FaceTecShadow * _Nullable scrollIndicatorShadow;
/**
 * Control whether to show the scroll indicator on the User OCR Confirmation Screen when there is scrollable content.
 * Default is true (enabled).
 */
@property (nonatomic) BOOL enableScrollIndicator;
/**
 * Control whether to animate the text of the scroll indicator on the User OCR Confirmation Screen.
 * Default is true (enabled).
 */
@property (nonatomic) BOOL enableScrollIndicatorTextAnimation;
/**
 * Control whether to place the User OCR Confirmation Screen action button at the bottom of the scrollable content, or fixed to the bottom of the screen (always visible).
 * Default is false (button is below the scrollable content).
 */
@property (nonatomic) BOOL enableFixedConfirmButton;
/**
 * Control whether to show the animate-able image on the scroll indicator on the User OCR Confirmation Screen.
 * Default is true (shown).
 */
@property (nonatomic) BOOL showScrollIndicatorImage;

@end

/**
 * Customize the Photo ID Match Screens.
 */
__attribute__((visibility("default")))
@interface FaceTecIDScanCustomization : NSObject
/**
 * Controls whether to show the 'FaceTec_document' image (or image configured with .selectionScreenDocumentImage) on the Identity Document Type Selection Screen.
 * Default is true (visible).
 */
@property (nonatomic) BOOL showSelectionScreenDocumentImage;
/**
 * Image displayed on the Identity Document Type Selection Screen below the header message.
 * Default is configured to use image named 'FaceTec_document' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable selectionScreenDocumentImage;
/**
 * Color of the Identity Document Type Selection Screen background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull selectionScreenBackgroundColors;
/**
 * Color of the text displayed on the Identity Document Type Selection Screen (not including the action button text).
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull selectionScreenForegroundColor;
/**
 * Color of the Identity Document Review Screen background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull reviewScreenBackgroundColors;
/**
 * Color of the instruction message text displayed on the Identity Document Review Screen (not including the action button).
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull reviewScreenForegroundColor;
/**
 * Color of the text view background during the Identity Document Review Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull reviewScreenTextBackgroundColor;
/**
 * Color of the text view background border during the Identity Document Review Screen.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull reviewScreenTextBackgroundBorderColor;
/**
 * Corner radius of the text view background and border during the Identity Document Review Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int reviewScreenTextBackgroundCornerRadius;
/**
 * Thickness of the text view background border during the Identity Document Review Screen.
 * Default is 0.
 */
@property (nonatomic) int reviewScreenTextBackgroundBorderWidth;
/**
 * Color of the instruction message text displayed on the Identity Document Capture Screen (not including the action button text or the tap-to-focus message text).
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureScreenForegroundColor;
/**
 * Color of the text view background during the Identity Document Capture Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureScreenTextBackgroundColor;
/**
 * Color of the text view background border during the Identity Document Capture Screen.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureScreenTextBackgroundBorderColor;
/**
 * Corner radius of the text view background and border during the Identity Document Capture Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int captureScreenTextBackgroundCornerRadius;
/**
 * Thickness of the text view background border during the Identity Document Capture Screen.
 * Default is 0.
 */
@property (nonatomic) int captureScreenTextBackgroundBorderWidth;
/**
 * Color of the tap-to-focus message text displayed below the Capture Frame during the Identity Document Capture Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureScreenFocusMessageTextColor;
/**
 * Font of the tap-to-focus message text below the Capture Frame during the Identity Document Capture Screen.
 * Default is a light system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull captureScreenFocusMessageFont;
/**
 * Color of the action button's text during Photo ID Match Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextNormalColor;
/**
 * Color of the action button's background during Photo ID Match Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundNormalColor;
/**
 * Color of the action button's text when the button is pressed during the Photo ID Match Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextHighlightColor;
/**
 * Color of the action button's background when the button is pressed during the Photo ID Match Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundHighlightColor;
/**
 * Color of the action button's text when the button is disabled during Photo ID Match Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextDisabledColor;
/**
 * Color of the action button's background when the button is disabled during the Photo ID Match Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundDisabledColor;
/**
 * Color of the action button's border during Photo ID Match Screens.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBorderColor;
/**
 * Thickness of the action button's border during the Photo ID Match Screens.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonBorderWidth;
/**
 * Corner radius of the action button's border during the Photo ID Match Screens.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonCornerRadius;

/**
 * Font of the title during the Identity Document Type Selection Screen.
 * Default is a semi-bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull headerFont;

/**
 * Font of the instruction message text during the Identity Document Capture and Review Screens.
 * Default is a light system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull subtextFont;

/**
 * Font of the action button's text during the Photo ID Match Screens.
 * Default is a bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull buttonFont;
/**
 * Color of the Identity Document Capture Screen's background.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureScreenBackgroundColor;
/**
 * Color of the Identity Document Capture Frame's stroke.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull captureFrameStrokeColor;
/**
 * Thickness of the Identity Document Capture Frame's stroke.
 * Default is dynamically configured per device at runtme.
 */
@property (nonatomic) int captureFrameStrokeWith;
/**
 * Corner radius of the Identity Document Capture Frame.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int captureFrameCornerRadius;
/**
 * Image displayed for the Torch button on the Identity Document Capture Screen when the torch/flashlight is active/on.
 * Default is configured to use image named 'FaceTec_active_torch' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable activeTorchButtonImage;
/**
 * Image displayed for the Torch button on the Identity Document Capture Screen when the torch/flashlight is inactive/off.
 * Default is configured to use image named 'FaceTec_inactive_torch' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable inactiveTorchButtonImage;
/**
 * Color of the Additional Review Screen background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull additionalReviewScreenBackgroundColors;
/**
 * Color of the text and default animation displayed on the Additional Review Screen (not including the action button text).
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull additionalReviewScreenForegroundColor;
/**
 * Image displayed on the ID Scan Additional Review Screen.
 * Default is configured to use image named 'FaceTec_review' located in application's Assets folder.
 * If no image is configured and onCreateAdditionalReviewScreenAnimationView is not configured to return a view, a default animation will be used.
 */
@property (nonatomic, strong) UIImage * _Nullable additionalReviewScreenImage;
/**
 * Display the Additional Review Tag during the ID Scan Result Screen, if additional review is required.
 * This tag will not be displayed if the Additional Review Screen is disabled.
 * Default is true (enabled).
 */
@property (nonatomic) BOOL enableAdditionalReviewTag;
/**
 * Image displayed for the Additional Review Tag during the ID Scan Result Screen, if additional review is required.
 * Default is configured to use image named 'FaceTec_review_tag' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable additionalReviewTagImage;
/**
 * Color of the default Additional Review Tag image.
 * Only is applied to the Additional Review Tag image if FaceTecIDScanCustomization.additionalReviewTagImage is not configured.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull additionalReviewTagImageColor;
/**
 * Color of the Additional Review Tag text.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull additionalReviewTagTextColor;
/**
 * Color of the ID Scan Feedback Screen background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull idFeedbackScreenBackgroundColors;
/**
 * Color of the text displayed on the ID Scan Feedback Screen (not including the action button text).
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull idFeedbackScreenForegroundColor;
/**
 * Image displayed on the ID Scan Feedback Screen for the front-side of the ID in the default animation.
 * The images configured with idFeedbackScreenFlipIDFrontImage and idFeedbackScreenFlipIDBackImage will be used for the default flip animation and displayed instead of a custom animation configured with onCreateIDFeedbackScreenFlipIDToBackAnimationView or onCreateIDFeedbackScreenFlipIDToFrontAnimationView.
 * Default is configured to use image named 'FaceTec_id_card_front' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable idFeedbackScreenFlipIDFrontImage;
/**
 * Image displayed on the ID Scan Feedback Screen for the front-side of the ID in the default animation.
 * The images configured with idFeedbackScreenFlipIDFrontImage and idFeedbackScreenFlipIDBackImage will be used for the default flip animation and displayed instead of a custom animation configured with onCreateIDFeedbackScreenFlipIDToBackAnimationView or onCreateIDFeedbackScreenFlipIDToFrontAnimationView.
 * Default is configured to use image named 'FaceTec_id_card_back' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable idFeedbackScreenFlipIDBackImage;
/**
 * Controls whether to show the 'FaceTec_face_match_to_id_branding_logo' image (or image configured with .faceMatchToIDBrandingImage) on the ID Scan Capture Screen for Face Match to ID Sessions.
 * Default is false (hidden).
 */
@property (nonatomic) BOOL showFaceMatchToIDBrandingImage;
/**
 * Image displayed on the ID Scan Capture Screen for Face Match To ID Sessions.
 * Default is configured to use image named 'FaceTec_face_match_to_id_branding_logo' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable faceMatchToIDBrandingImage;
/**
 * Image displayed on the ID Scan Capture Screen for standalone ID Scan Sessions.
 * Default is configured to use image named 'FaceTec_standalone_id_scan_watermark' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable standaloneIDScanWatermark;
/**
 * Controls whether to show the Additional Review Screen at the end of an ID Scan Session if there was an issue with scanning part of the ID.
 * Default is false (shown).
 */
@property (nonatomic) BOOL disableAdditionalReviewScreen;
/**
 * Controls whether to show the ID Scan Feedback Screen at the end of an ID Scan Result Screen if there was a correctable issue with scanning the ID.
 * Default is false (shown).
 */
@property (nonatomic) BOOL disableIDFeedbackScreen;
/**
 * Controls the length of time to display the Additional Review Screen animation after being transitioned in and before being transitioned out.
 * Value is in seconds. This value has to be between 1.5 and 3.0. If it’s lower than 1.5 or higher than 3.0, it will be defaulted to 1.5 or 3.0 respectively.
 * Default is 2.
 */
@property (nonatomic) double additionalReviewScreenAnimationDisplayTime;
/**
 * Controls the length of time to display the ID Feedback Screen animation after being transitioned in and before being transitioned out.
 * Value is in seconds. This value has to be between 1.5 and 3.0. If it’s lower than 1.5 or higher than 3.0, it will be defaulted to 1.5 or 3.0 respectively.
 * Default is 2.
 */
@property (nonatomic) double idFeedbackScreenAnimationDisplayTime;
/**
 * Controls the length of time to display the NFC Screen animation after being transitioned in and before being transitioned out.
 * Value is in seconds. This value has to be between 1.5 and 3.0. If it’s lower than 1.5 or higher than 3.0, it will be defaulted to 1.5 or 3.0 respectively.
 * Default is 2.
 */
@property (nonatomic) double nfcScreenAnimationDisplayTime;

@end

/**
 * Customize the New User Guidance and Retry Screens.
 * New User Guidance Screens are shown before the Session and Retry Screens are shown after an unsuccessful Session.
 */
__attribute__((visibility("default")))
@interface FaceTecGuidanceCustomization : NSObject
/**
 * Color of the background for the New User Guidance and Retry Screens.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull backgroundColors;
/**
 * Color of the text displayed on the New User Guidance and Retry Screens (not including the action button text).
 * Note: This customization can be overridden for specific text using FaceTecGuidanceCustomization.readyScreenHeaderTextColor, .readyScreenSubtextTextColor, .retryScreenHeaderTextColor, and/or .retryScreenSubtextTextColor.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull foregroundColor;
/**
 * Color of the action button's text during the New User Guidance and Retry Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextNormalColor;
/**
 * Color of the action button's background during the New User Guidance and Retry Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundNormalColor;
/**
 * Color of the action button's text when the button is pressed during the New User Guidance and Retry Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextHighlightColor;
/**
 * Color of the action button's background when the button is pressed during the New User Guidance and Retry Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundHighlightColor;
/**
 * Color of the action button's text when the button is disabled during the New User Guidance and Retry Screens.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonTextDisabledColor;
/**
 * Color of the action button's background when the button is disabled during the New User Guidance and Retry Screens.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundDisabledColor;
/**
 * Color of the action button's border during the New User Guidance and Retry Screens.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull buttonBorderColor;
/**
 * Thickness of the action button's border during the New User Guidance and Retry Screens.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonBorderWidth;
/**
 * Corner radius of the action button's border during the New User Guidance and Retry Screens.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int buttonCornerRadius;

/**
 * Font of the title during the New User Guidance and Retry Screens.
 * Note: This customization can be overridden for specific text using FaceTecGuidanceCustomization.readyScreenHeaderFont and/or .retryScreenHeaderFont.
 * Default is a semi-bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull headerFont;

/**
 * Font of the title's subtext and messages during the New User Guidance and Retry Screens.
 * Note: This customization can be overridden for specific text using FaceTecGuidanceCustomization.readyScreenSubtextFont and/or .retryScreenSubtextFont.
 * Default is a light system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull subtextFont;

/**
 * Specify an attributed string to use instead of the localized string for the text of the title displayed on the Get Ready  Screen during the New User Guidance and Retry Screens.
 * If this value is nil, the localized string, FaceTecStrings.FaceTec_instructions_header_ready, will be used for the text of the title displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Default is nil.
 */
@property (nonatomic, strong) NSAttributedString * _Nullable readyScreenHeaderAttributedString;
/**
 * Font of the title's text displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Note: This will override the header font configured with FaceTecGuidanceCustomization.headerFont for the Get Ready Screen.
 * If this value is nil, FaceTecGuidanceCustomization.headerFont will be used for the font of the title's text displayed on the Get Ready Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable readyScreenHeaderFont;

/**
 * Color of the header text displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Note: This will override the header text color configured with FaceTecGuidanceCustomization.foregroundColor for the Get Ready Screen.
 * If this value is nil, FaceTecGuidanceCustomization.foregroundColor will be used for the color of the title's text displayed on the Get Ready Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIColor * _Nullable readyScreenHeaderTextColor;
/**
 * Specify an attributed string to use instead of the localized string for the text of the title's subtext displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * If this value is nil, the localized string, FaceTecStrings.FaceTec_instructions_message_ready, will be used for the text of the title's subtext displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Default is nil.
 */
@property (nonatomic, strong) NSAttributedString * _Nullable readyScreenSubtextAttributedString;
/**
 * Font of the title's subtext displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Note: This will override the title's subtext font configured with FaceTecGuidanceCustomization.subtextFont for the Get Ready Screen.
 * If this value is nil, FaceTecGuidanceCustomization.subtextFont will be used for the font of the title's subtext displayed on the Get Ready Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable readyScreenSubtextFont;

/**
 * Color of the title's subtext displayed on the Get Ready Screen during the New User Guidance and Retry Screens.
 * Note: This will override the title's subtext color configured with FaceTecGuidanceCustomization.foregroundColor for the Get Ready Screen.
 * If this value is nil, FaceTecGuidanceCustomization.foregroundColor will be used for the color of the title's subtext displayed on the Get Ready Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIColor * _Nullable readyScreenSubtextTextColor;
/**
 * Specify an attributed string to use instead of the localized string for the text of the title displayed on the first Retry Screen.
 * If this value is nil, the localized string, FaceTecStrings.FaceTec_retry_header, will be used for the text of the title displayed on the first Retry Screen.
 * Default is nil.
 */
@property (nonatomic, strong) NSAttributedString * _Nullable retryScreenHeaderAttributedString;
/**
 * Font of the title's text displayed on the first Retry Screen.
 * Note: This will override the header font configured with FaceTecGuidanceCustomization.headerFont for the first Retry Screen.
 * If this value is nil, FaceTecGuidanceCustomization.headerFont will be used for the font of the title's text displayed on the first Retry Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable retryScreenHeaderFont;

/**
 * Color of the header text displayed on the first Retry Screen.
 * Note: This will override the header text color configured with FaceTecGuidanceCustomization.foregroundColor for the first Retry Screen.
 * If this value is nil, FaceTecGuidanceCustomization.foregroundColor will be used for the color of the title's text displayed on the first Retry Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIColor * _Nullable retryScreenHeaderTextColor;
/**
 * Specify an attributed string to use instead of the localized string for the text of the title's subtext displayed on the first Retry Screen.
 * If this value is nil, the localized strings, FaceTecStrings.FaceTec_retry_subheader_message, will be used for the text of the title's subtext displayed on the first Retry Screen.
 * Default is nil.
 */
@property (nonatomic, strong) NSAttributedString * _Nullable retryScreenSubtextAttributedString;
/**
 * Font of the title's subtext and messages displayed on the first Retry Screen.
 * Note: This will override the font of the title's subtext and messages configured with FaceTecGuidanceCustomization.subtextFont for the first Retry Screen.
 * If this value is nil, FaceTecGuidanceCustomization.subtextFont will be used for the font of the title's subtext and messages displayed on the first Retry Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIFont * _Nullable retryScreenSubtextFont;

/**
 * Color of the title's subtext and messages displayed on the first Retry Screen.
 * Note: This will override the title's subtext and message color configured with FaceTecGuidanceCustomization.foregroundColor for the first Retry Screen.
 * If this value is nil, FaceTecGuidanceCustomization.foregroundColor will be used for the color of the title's subtext displayed on the first Retry Screen.
 * Default value is nil.
 */
@property (nonatomic, strong) UIColor * _Nullable retryScreenSubtextTextColor;
/**
 * Font of the action button's text during the New User Guidance and Retry Screens.
 * Default is a bold system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull buttonFont;

/**
 * Background color of the Get Ready Screen text views during the New User Guidance and Retry Screens.
 * This will only be visible on iPhone 4/4s models.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull readyScreenTextBackgroundColor;
/**
 * Background corner radius of the Get Ready Screen text views during the New User Guidance and Retry Screens.
 * This will only be visible on iPhone 4/4s models.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int readyScreenTextBackgroundCornerRadius;
/**
 * Color of the Get Ready Screen's oval fill.
 * Default is transparent.
 */
@property (nonatomic, strong) UIColor * _Nonnull readyScreenOvalFillColor;
/**
 * Image displayed as Ideal example (right image) during the first Retry Screen.
 * Default is configured to use image named 'FaceTec_ideal' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable retryScreenIdealImage;
/**
 * Images displayed as Ideal examples (right image) during the first Retry Screen.
 * When configured to a non-empty array, these images will override the single image configured for FaceTecGuidanceCustomization.retryScreenIdealImage.
 * Default is an empty array.
 */
@property (nonatomic, strong) NSArray<UIImage *> * _Nullable retryScreenSlideshowImages;
/**
 * Control the time, in milliseconds, that each image is shown for before transitioning to the next image.
 * Default is 1500.
 */
@property (nonatomic) int retryScreenSlideshowInterval;
/**
 * Control whether to allow the slideshow images to appear in a randomized order during each Retry Screen.
 * Default is true (enabled).
 */
@property (nonatomic) BOOL enableRetryScreenSlideshowShuffle;
/**
 * Color of the image borders during the first Retry Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull retryScreenImageBorderColor;
/**
 * Thickness of the image borders during the first Retry Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int retryScreenImageBorderWidth;
/**
 * Corner radius of the image borders during the first Retry Screen.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int retryScreenImageCornerRadius;
/**
 * Color of the oval's stroke that overlay's the Ideal image example during the first Retry Screen.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull retryScreenOvalStrokeColor;

/**
 * Image displayed on the Camera Permissions Screen.
 * Default is configured to use image named 'FaceTec_camera' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable cameraPermissionsScreenImage;
- (nonnull instancetype) init;
@end

/**
 * Customize the Result Screen.
 * Shown for server-side work and response handling.
 */
__attribute__((visibility("default")))
@interface FaceTecResultScreenCustomization : NSObject
/**
 * Control the size of the activity indicator and result animations displayed on the Result Screen.
 * This value represents the scaling factor that will be applied to the default animation bounds.
 * This value has to be between 0.5 and 1.5. If it’s lower than 0.5 or higher than 1.5, it will be defaulted to 0.5 or 1.5 respectively.
 * Default value is 1.
 */
@property (nonatomic) float animationRelativeScale;
/**
 * Color of the Result Screen's background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull backgroundColors;
/**
 * Color of the text displayed on the Result Screen.
 * Default is black.
 */
@property (nonatomic, strong) UIColor * _Nonnull foregroundColor;
/**
 * Font of the message text displayed on the Result Screen.
 * Default is a system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull messageFont;

/**
 * Color of the activity indicator animation shown during server-side work.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull activityIndicatorColor;
/**
 * Image displayed and rotated during server-side work.
 * If image is configured, default activity indicator will be hidden.
 * Default is set to nil and will fallback to using the default activity indicator animation, which respects the color assigned to .activityIndicatorColor.
 */
@property (nonatomic, strong) UIImage * _Nullable customActivityIndicatorImage;
/**
 * Control the speed of the rotation for your custom activity indicator image.
 * Only applicable when image is configured for .customActivityIndicatorImage.
 * This value indicates the duration of each full rotation (in milliseconds).
 * Default is 1000.
 */
@property (nonatomic) int customActivityIndicatorRotationInterval;
/**
 * Color of the result animation's background for success scenarios.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationBackgroundColor;
/**
 * Color of the default result animation's background for unsuccess scenarios..
 * Default is clear.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationUnsuccessBackgroundColor;
/**
 * Color of the default result animation's accent color for success scenarios.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationForegroundColor;
/**
 * Color of the default result animation's accent color for ID Scan success scenarios.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationIDScanSuccessForegroundColor;
/**
 * Color of the default result animation's accent color for NFC success scenarios.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationNFCSuccessForegroundColor;
/**
 * Color of the default result animation's accent color for unsuccess scenarios.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull resultAnimationUnsuccessForegroundColor;
/**
 * Image displayed behind the result foreground animation for success scenarios.
 * If image is configured, default result background animation will be hidden.
 * Default is set to nil and will fallback to using the default result background animation, which respects the color assigned to .resultAnimationBackgroundColor.
 */
@property (nonatomic, strong) UIImage * _Nullable resultAnimationSuccessBackgroundImage;
/**
 * Image displayed behind the result foreground animation for unsuccess scenarios. Unsuccess result animations are only shown for unsuccessful Photo ID Match attempts.
 * If image is configured, default result background animation will be hidden.
 * Default is set to nil and will fallback to using the default result background animation, which respects the color assigned to .resultAnimationUnsuccessBackgroundColor.
 */
@property (nonatomic, strong) UIImage * _Nullable resultAnimationUnsuccessBackgroundImage;
/**
 * Control whether to show or hide the upload progress bar during server-side work.
 * Default is true (shown).
 */
@property (nonatomic) BOOL showUploadProgressBar;
/**
 * Color of the upload progress bar's fill.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull uploadProgressFillColor;
/**
 * Color of upload progress bar's track.
 * Default is a semi-opaque shade of black.
 */
@property (nonatomic, strong) UIColor * _Nonnull uploadProgressTrackColor;
/**
 * Controls the length of time to wait while the FaceScan Session server request is pending before transitioning the Result Screen upload message to the "Still Uploading" localization.
 * The applicable localizations include:  "FaceTec_result_facescan_upload_message_still_uploading".
 * Value is in seconds. This value must be set to a value between 5.0 and 10.0. If it's lower than 5.0 or higher than 10.0, it will be defaulted to 5.0 or 10.0 respectively.
 * Default is 6.0.
 */
@property (nonatomic) double faceScanStillUploadingMessageDelayTime;
/**
 * Controls the length of time to wait while the ID Scan Session server request is pending before transitioning the Result Screen upload message to the "Still Uploading" localization.
 * The applicable localizations include: "FaceTec_result_idscan_upload_message_front_side_still_uploading", "FaceTec_result_idscan_upload_message_back_side_still_uploading", "FaceTec_result_idscan_upload_message_nfc_still_uploading", "FaceTec_result_idscan_upload_message_skipped_nfc_still_uploading", "FaceTec_result_idscan_upload_message_user_confirmed_info_still_uploading".
 * Value is in seconds. This value must be set to a value between 5.0 and 10.0. If it's lower than 5.0 or higher than 10.0, it will be defaulted to 5.0 or 10.0 respectively.
 * Default is 8.0.
 */
@property (nonatomic) double idScanStillUploadingMessageDelayTime;
/**
 * Controls the length of time to display the Result Screen result animation after being transitioned in and before being transitioned out.
 * Value is in seconds. This value has to be between 1.5 and 3.0. If it’s lower than 1.5 or higher than 3.0, it will be defaulted to 1.5 or 3.0 respectively.
 * Default is 2.5.
 */
@property (nonatomic) double resultAnimationDisplayTime;
/**
 * Color of the Session Abort animation's background.<br>
 * Default is red.
 */
@property (nonatomic, strong) UIColor * _Nonnull sessionAbortAnimationBackgroundColor;
/**
 * Color of the  Session Abort animation's accent color.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull sessionAbortAnimationForegroundColor;

/**
 * Image displayed behind the Session Abort foreground animation.
 * If image is configured, the default background animation will be hidden.
 * Default is set to nil and will fallback to using the default  background animation, which respects the color assigned to .sessionAbortAnimationBackgroundColor.
 */
@property (nonatomic, strong) UIImage * _Nullable sessionAbortAnimationBackgroundImage;
- (nonnull instancetype) init;
@end

/**
 * Customize the Oval and the Progress Spinner animations.
 */
__attribute__((visibility("default")))
@interface FaceTecOvalCustomization : NSObject
/**
 * Color of the Oval outline.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull strokeColor;
/**
 * Thickness of the Oval outline.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int strokeWidth;
/**
 * Color of the animated Progress Spinner strokes.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull progressColor1;
@property (nonatomic, strong) UIColor * _Nonnull progressColor2;
/**
 * Radial offset of the animated Progress Spinner strokes relative to the outermost bounds of the Oval outline.
 * As this value increases, the Progress Spinner stroke animations move closer toward the Oval's center.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int progressRadialOffset;
/**
 * Thickness of the animated Progress Spinner strokes.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int progressStrokeWidth;
- (nonnull instancetype) init;
@end

/**
 * Customize the Feedback Bar.
 */
__attribute__((visibility("default")))
@interface FaceTecFeedbackCustomization : NSObject
/**
 * Shadow displayed behind the Feedback Bar.
 * This customization can be set to nil for no shadow, or it can be set to an instance of FaceTecShadow.
 * Note: FaceTecShadow's configurable properties correlate to the shadow-related attributes available for CALayer objects.
 * Default is a custom sized black shadow.
 */
@property (nonatomic) FaceTecShadow * _Nullable shadow;
/**
 * Corner radius of the Feedback Bar.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int cornerRadius;

/**
 * Color of the text displayed within the Feedback Bar.
 * Default is white.
 */
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/**
 * Font of the text displayed within the Feedback Bar.
 * Default is system font.
 */
@property (nonatomic) UIFont * _Nonnull textFont;
/**
 * Control whether to enable the pulsating-text animation within the Feedback Bar.
 * Default is true (enabled).
 */
@property (nonatomic) BOOL enablePulsatingText;
/**
 * Color of the Feedback Bar's background. Recommend making this have some transparency.
 * Default is custom color.
 */
@property (nonatomic, strong) CAGradientLayer * _Nonnull backgroundColor;
- (nonnull instancetype) init;
@end

/**
 * Customize the Frame.
 */
__attribute__((visibility("default")))
@interface FaceTecFrameCustomization : NSObject
/**
 * Shadow displayed behind the Frame.
 * This customization can be set to nil for no shadow, or it can be set to an instance of FaceTecShadow.
 * Note: FaceTecShadow's configurable properties correlate to the shadow-related attributes available for CALayer objects.
 * Default is nil (no shadow).
 */
@property (nonatomic) FaceTecShadow * _Nullable shadow;
/**
 * Corner radius of the Frame.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int cornerRadius;
/**
 * Thickness of the Frame's border.
 * Default is dynamically configured per device at runtime.
 */
@property (nonatomic) int borderWidth;
/**
 * Color of the Frame's border.
 * Default is custom color.
 */
@property (nonatomic) UIColor * _Nonnull borderColor;
/**
 * Color of the background surrounding the oval outline during session.
 * Default is custom color.
 */
@property (nonatomic) UIColor * _Nonnull backgroundColor;
- (nonnull instancetype) init;
@end

/**
 * Customize the Cancel Button.
 * Shown during New User Guidance, Retry, and Photo ID Match Screens.
 */
__attribute__((visibility("default")))
@interface FaceTecCancelButtonCustomization : NSObject
/**
 * Image displayed on the Cancel Button.
 * Default is configured to use image named 'FaceTec_cancel' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable customImage;
/**
 * Location, or use, of the Cancel Button.
 * Default is ButtonLocationTopLeft.
 */
@property (nonatomic) enum FaceTecCancelButtonLocation location;
/**
 * The frame of the cancel button within the current screen's bounds.
 * Note: In order to use a custom-located cancel button, you MUST set .location to the enum value FaceTecCancelButtonLocationCustom.
 * Default is a CGRect at origin 0,0 with a size of 0 by 0.
 */
@property (nonatomic) CGRect customLocation;
/**
 * Control whether to disable and hide the cancel button on the Camera Permissions Screen.
 * Default is true (hidden).
 */
@property (nonatomic) BOOL hideForCameraPermissions;

- (nonnull instancetype) init;
@end

/**
 * Customize the Overlay.
 * The Overlay separates the Interface from the presenting application, covering the device's full screen.
 */
__attribute__((visibility("default")))
@interface FaceTecOverlayCustomization : NSObject
/**
 * Color of the Overlay background.
 * Default is transparent.
 */
@property (nonatomic, copy) UIColor * _Nonnull backgroundColor;
/**
 * Image displayed below the Frame on top of the Overlay.
 * Default is configured to use image named 'FaceTec_your_app_logo' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable brandingImage;
/**
 * Control whether to show the branding image below the Frame on top of the Overlay.
 * Default is true (shown).
 */
@property (nonatomic) BOOL showBrandingImage;
- (nonnull instancetype) init;
@end

/**
 * Customize Vocal Guidance.
 */
__attribute__((visibility("default")))
@interface FaceTecVocalGuidanceCustomization : NSObject
/**
 * Set Vocal Guidance Mode
 * Default is FaceTecVocalGuidanceMode.MinimalVocalGuidance
 */
@property (nonatomic) enum FaceTecVocalGuidanceMode mode;

/**
 * The sound file for "Please Frame Your Face In The Oval"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull pleaseFrameYourFaceInTheOvalSoundFile;

/**
 * The sound file for "Please Move Closer"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull pleaseMoveCloserSoundFile;

/**
 * The sound file for "Please Retry"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull pleaseRetrySoundFile;

/**
 * The sound file for "Uploading"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull uploadingSoundFile;

/**
 * The sound file for "FaceScan Successful"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull facescanSuccessfulSoundFile;

/**
 * The sound file for "Please Press The Button To Start"
 * Default uses a FaceTec internal sound file.
 */
@property (nonatomic) NSString * _Nonnull pleasePressTheButtonToStartSoundFile;

- (nonnull instancetype) init;
@end

/**
 * Customize the Securing Camera Screen.
 * Shown when securely loading and opening the camera before a Session.
 * Note: This is currently only shown when doing a Photo ID Scan Only Session.
 */
__attribute__((visibility("default")))
@interface FaceTecInitialLoadingAnimationCustomization : NSObject
/**
 * Control the size of the animation displayed on the Securing Camera Screen.
 * This value represents the scaling factor that will be applied to the default animation bounds.
 * This value has to be between 0.5 and 1.5. If it’s lower than 0.5 or higher than 1.5, it will be defaulted to 0.5 or 1.5 respectively.
 * Default value is 1.
 */
@property (nonatomic) float animationRelativeScale;
/**
 * Color of the Securing Camera Screen's background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull backgroundColors;
/**
 * Color of the text displayed on the Securing Camera Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull foregroundColor;
/**
 * Font of the message text displayed on the Securing Camera Screen.
 * Default is a system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
/**
 * Color of the Securing Camera animation's background.
 * Default is off-white  color.
 */
@property (nonatomic, strong) UIColor * _Nonnull defaultAnimationBackgroundColor;
/**
 * Color of the Securing Camera animation's accent color.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull defaultAnimationForegroundColor;
- (nonnull instancetype) init;
@end

/**
 * Customize the Orientation Screen.
 * Shown when the device is in an unsupported orientation during a Session..
 */
__attribute__((visibility("default")))
@interface FaceTecOrientationScreenCustomization : NSObject
/**
 * Color of the Orientation Screen's background.
 * Default is white.
 */
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull backgroundColors;
/**
 * Color of the text displayed on the Orientation Screen.
 * Default is custom color.
 */
@property (nonatomic, strong) UIColor * _Nonnull foregroundColor;
/**
 * Font of the message text displayed on the Orientation Screen.
 * Default is a system font.
 */
@property (nonatomic, strong) UIFont * _Nonnull messageFont;
/**
 * Image displayed on the Orientation Screen.
 * Default is configured to use image named 'FaceTec_rotate' located in application's Assets folder.
 */
@property (nonatomic, strong) UIImage * _Nullable iconImage;
- (nonnull instancetype) init;
@end

@class UIViewController;

/**
 The FaceTecSDKProtocol exposes methods the app can use to configure the behavior of FaceTec SDK.
 */
@protocol FaceTecSDKProtocol

/**
 Initializes the FaceTec SDK with a session request
 
 @param deviceKeyIdentifier Identifies the client
 @param sessionRequestProcessor An implementation of FaceTecSessionRequestProcessor used to send initial request to the FaceTec Server.
 @param callback Callback to notify caller when initialization has completed.
 */
- (void)initializeWithSessionRequest:(NSString*_Nonnull)deviceKeyIdentifier sessionRequestProcessor:(id<FaceTecSessionRequestProcessor>_Nonnull)sessionRequestProcessor completion:(id<FaceTecInitializeCallback>_Nonnull)callback NS_SWIFT_NAME(initializeWithSessionRequest(deviceKeyIdentifier:sessionRequestProcessor:completion:));

/**
 Release resources related to FaceTec SDK.
 Initialize <em>must</em>  be called again by the application before invoking any SDK operations.
 This function may be called repeatedly without harm.
 */
- (void)deinitialize;

/**
 Configures the look and feel of FaceTec SDK.

 @param customization An instance of FaceTecCustomization
 */
- (void)setCustomization:(FaceTecCustomization * _Nonnull)customization;

/**
 Configures the look and feel when low light mode is active. If not configured or set to nil, we will fallback to using the FaceTecCustomization instance configured with setCustomization(), or our default customizations if setCustomization() has not been called.

 @param lowLightCustomization An instance of FaceTecCustomization or nil
 */
- (void)setLowLightCustomization:(FaceTecCustomization * _Nullable)lowLightCustomization NS_SWIFT_NAME(setLowLightCustomization(_:));

/**
 Configures the look and feel when dynamic dimming is active. If not configured or set to nil, we will fallback to using the FaceTecCustomization instance configured with setCustomization(), or our default customizations if setCustomization() has not been called.

 @param dynamicDimmingCustomization An instance of FaceTecCustomization or nil
 */
- (void)setDynamicDimmingCustomization:(FaceTecCustomization * _Nullable)dynamicDimmingCustomization NS_SWIFT_NAME(setDynamicDimmingCustomization(_:));

/**
 Convenience method to get the time when a lockout will end.
 This will be null if the user is not locked out
 @return NSDate
 */
- (NSDate * _Nullable)getLockoutEndTime;

/**
 * @return True if the user is locked out of FaceTec SDK
 */
- (BOOL)isLockedOut;

/**
 Convenience method to check for camera permissions.
 This function is used to check the camera permission status prior to using FaceTec SDK.  If camera permission has not been previously granted,
 FaceTec SDK will display a UI asking the user to allow permission.  Some applications may wish to manage camera permission themselves - those applications
 should verify camera permissions prior to transitioning to FaceTec SDK.

 @return Value representing the current camera permission status
 */
@property (nonatomic, readonly) enum FaceTecCameraPermissionStatus cameraPermissionStatus;

/** Sets a preferred language to be used for all strings. */
- (void)setLanguage:(NSString * _Nonnull)language;

/**
 Configure where the FaceTec SDK looks for custom localized strings.
 @param table Optional name of the string table to look in.  By default, this is "FaceTec" and string will be read from FaceTec.strings.
 @param bundle Optional NSBundle instance to search for FaceTec SDK string definitions in.  This will be searched after the main bundle and before FaceTec SDK's default strings.
 */
- (void)configureLocalizationWithTable:(NSString * _Nullable)table bundle:(NSBundle * _Nullable)bundle;

/**
 Configure the custom localized strings to be used for groups, fields, and placeholder text on ID Scan's User OCR Confirmation Screen.
 @param dictionary Optional dictionary created from a JSON that follows our template file of configurable groups, fields, and placeholder texts: "FaceTec_OCR_Customization.json".  By default, this is nil and the strings used will be our internal defaults.
 */
- (void)configureOCRLocalizationWithDictionary:(NSDictionary * _Nullable)dictionary NS_SWIFT_NAME(configureOCRLocalization(dictionary:));

/**
 Configure where the FaceTec SDK looks for custom FaceTec images. If you use this API, you MUST call this function prior to initializing the FaceTecCustomization object.
@param bundle Optional NSBundle instance to search for FaceTec images.
*/
- (void)setBundleForFaceTecImages:(NSBundle * _Nullable)bundle;

/**
 Fetches the version number of the current FaceTec SDK release
 
 @return Version number of sdk release package
 */
@property (nonatomic, readonly, copy) NSString * _Nonnull version;

/**
    Method needed only by the FaceTec Sample App when communicating with the Testing API
 */
- (NSString * _Nonnull)getTestingAPIHeader;

/**
 Method to set dynamic overrides of the SDK's customizable string resources.
 @param strings A dictionary object mapping a string resource name (e.g. FaceTecStringKeyActionOk) to a String value.
*/
- (void)setDynamicStrings:(NSDictionary<NSString*,NSString*> * _Nonnull)strings;

/** Retunrs a description string for a FaceTecInitializationError value*/
- (NSString * _Nonnull)descriptionForInitializationError:(enum FaceTecInitializationError)error;
@end

@interface FaceTecSDKInstance : NSObject
- (UIViewController * _Nonnull)start3DLivenessWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor>_Nonnull)sessionRequestProcessor;
- (UIViewController * _Nonnull)start3DLivenessThen3DFaceMatchWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor>_Nonnull)sessionRequestProcessor;
- (UIViewController * _Nonnull)startIDScanOnlyWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor> _Nonnull)sessionRequestProcessor;
- (UIViewController * _Nonnull)startIDScanThen3D2DMatchWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor> _Nonnull)sessionRequestProcessor;
- (UIViewController * _Nonnull)start3DLivenessThen3D2DPhotoIDMatchWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor> _Nonnull)sessionRequestProcessor;
- (UIViewController * _Nonnull)startSecureOfficialIDPhotoCaptureWithSessionRequestProcessor:(id<FaceTecSessionRequestProcessor>_Nonnull)sessionRequestProcessor;
@end

/** Represents the various end states of a FaceTec Session. This will be available after a Session returns to your application in the FaceTecSessionResult. */
typedef NS_ENUM(NSInteger, FaceTecSessionStatus) {
    /**
     The Session was completed successfully.
     */
    FaceTecSessionStatusSessionCompleted,
    /**
     The Session was cancelled because abortOnCatastrophicError() was called.
     */
    FaceTecSessionStatusRequestAborted,
    /**
     The user canceled before performing enough Scans to Succeed.
     */
    FaceTecSessionStatusUserCancelledFaceScan,
    /**
     The user cancelled before completing all of the steps in the ID Scan Process.
     */
    FaceTecSessionStatusUserCancelledIDScan,
    /**
     The Session was cancelled because the user was in a locked out state.
     */
    FaceTecSessionStatusLockedOut,
    /**
     The Session was cancelled because FaceTec SDK was unable to start the camera on this device, or an unexpected error occurred with the camera during runtime.
     */
    FaceTecSessionStatusCameraError,
    /**
     The camera access is prevented because either the user has explicitly denied permission or the user's device is configured to not allow access by a device policy.
     For more information on restricted by policy case, please see the the Apple Developer documentation on AVAuthorizationStatus.restricted.
     */
    FaceTecSessionStatusCameraPermissionsDenied,
    /**
     The Session was cancelled because of an unknown and unexpected error.  FaceTec SDK leverages a variety of iOS APIs including camera, storage, security, networking, and more.
     This return value is a catch-all for errors experienced during normal usage of these APIs.
     */
    FaceTecSessionStatusUnknownInternalError
};

/** Represents the result of a Session*/
@interface FaceTecSessionResult: NSObject
/** The end status of the Session */
@property (readonly) FaceTecSessionStatus sessionStatus;
@end
